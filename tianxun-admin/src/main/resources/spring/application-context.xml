<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd  
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"
	default-autowire="byName">
	
	<import resource="application-mybatis.xml"/>
	<import resource="application-solr.xml"/>
	
	<!-- 默认是基于java interface代理，proxy-target-class="true"表示基于cglib代理。 expose-proxy="true"表示将aop放到AopContext中，供查询 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!--扫描@Required,@Autowired等注解,自动装配bean-->
	<context:annotation-config/>
	
	<!--自动扫描的基包,包含子包,可以使用切点表达式指定更精确一点。多个用逗号分隔-->
	<context:component-scan base-package="com.vteba">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!--读取jndi数据库连接配置属性文件-->
	<bean id="propUtils" class="com.vteba.utils.common.PropUtils">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="tiantianDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat"/>
	</bean>
	
	<!--基于annotation配置Hibernate sessionFactory-->
<!-- 	<bean id="iknowSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> -->
<!-- 		<property name="dataSource" ref="iknowDataSource" /> -->
<!-- 		<property name="packagesToScan"> -->
<!--     		<list> -->
<!--      			<value>com.vteba.finance.assets.model</value> -->
<!--      			<value>com.vteba.finance.currency.model</value> -->
<!--      			<value>com.vteba.finance.account.model</value> -->
<!--     		</list> -->
<!--    		</property> -->
<!-- 		<property name="namingStrategy"> -->
<!-- 			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" /> -->
<!-- 		</property> -->
<!-- 		<property name="hibernateProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="hibernate.dialect">${hibernate.dialect}</prop> -->
<!-- 				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop> -->
<!-- 				<prop key="hibernate.jdbc.fetch_size">50</prop> -->
<!-- 				<prop key="hibernate.default_batch_fetch_size">50</prop> -->
<!-- 				<prop key="hibernate.jdbc.use_reflection_optimizer">true</prop> -->
<!-- 				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop> -->
<!-- 				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop> -->
<!-- 				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop> -->
<!-- 				<prop key="hibernate.use_sql_comments">true</prop> -->
<!-- 				<prop key="hibernate.max_fetch_depth">3</prop> -->
<!-- 				<prop key="javax.persistence.validation.mode">none</prop> -->
				
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!-- SpringJdbcTemplate -->
	<bean id="tiantianJdbcTemplate" class="com.vteba.tx.jdbc.spring.SpringJdbcTemplate">
		<property name="dataSource" ref="tiantianDataSource"/>
	</bean>
	
	<!--单个Hibernate SessionFactory的Transaction manager-->
<!-- 	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> -->
<!-- 		<property name="sessionFactory" ref="iknowSessionFactory" /> -->
<!-- 	</bean> -->
    
    <!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>
    
	<!--切面事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="persist*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="remove*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="create*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="execute*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="auto*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="batch*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="check*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="calculate*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="handle*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="*" propagation="REQUIRED" isolation="REPEATABLE_READ" timeout="10" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
		</tx:attributes> 
	</tx:advice>
	
	<!--为指定包下的类的方法应用事务切点-->
	<aop:config>
		<aop:pointcut expression="execution(* com.vteba..*.service.impl.*.*(..))" id="serviceTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTxMethodPointCut"/>
	</aop:config>
	
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg value="4"/>
	</bean>

</beans>